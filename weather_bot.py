import asyncio
import logging
import sys
import os
import aiohttp
import sqlite3
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from keyboards import get_start_keyboard, get_favorites_keyboard, get_back_keyboard

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ==================== –ë–ê–ó–ê –î–ê–ù–ò–• ====================
def init_db():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS favorites (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL,
            city_name TEXT NOT NULL,
            added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(user_id, city_name)
        )
    ''')
    conn.commit()
    conn.close()

def add_favorite_city(user_id: int, city_name: str) -> bool:
    """–î–æ–¥–∞—î –º—ñ—Å—Ç–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    try:
        conn = sqlite3.connect('weather_bot.db')
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO favorites (user_id, city_name) VALUES (?, ?)',
            (user_id, city_name.lower())
        )
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        return False  # –ú—ñ—Å—Ç–æ –≤–∂–µ —î –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö

def remove_favorite_city(user_id: int, city_name: str) -> bool:
    """–í–∏–¥–∞–ª—è—î –º—ñ—Å—Ç–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'DELETE FROM favorites WHERE user_id = ? AND city_name = ?',
        (user_id, city_name.lower())
    )
    deleted = cursor.rowcount > 0
    conn.commit()
    conn.close()
    return deleted

def get_favorite_cities(user_id: int) -> list:
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT city_name FROM favorites WHERE user_id = ? ORDER BY added_date DESC',
        (user_id,)
    )
    cities = [row[0] for row in cursor.fetchall()]
    conn.close()
    return cities

def is_favorite(user_id: int, city_name: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–æ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    conn = sqlite3.connect('weather_bot.db')
    cursor = conn.cursor()
    cursor.execute(
        'SELECT COUNT(*) FROM favorites WHERE user_id = ? AND city_name = ?',
        (user_id, city_name.lower())
    )
    count = cursor.fetchone()[0]
    conn.close()
    return count > 0

# ==================== FSM –°–¢–ê–ù–ò ====================
class WeatherForm(StatesGroup):
    waiting_for_city = State()
    waiting_for_favorite_action = State()

# ==================== –ü–û–ì–û–î–ù–Ü –§–£–ù–ö–¶–Ü–á ====================
def get_weather_emoji(weather_id: int) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –µ–º–æ–¥–∑—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∫–æ–¥—É –ø–æ–≥–æ–¥–∏"""
    if 200 <= weather_id < 300:
        return "‚õàÔ∏è"
    elif 300 <= weather_id < 600:
        return "üåßÔ∏è"
    elif 600 <= weather_id < 700:
        return "‚ùÑÔ∏è"
    elif weather_id == 800:
        return "‚òÄÔ∏è"
    elif 801 <= weather_id < 900:
        return "‚òÅÔ∏è"
    else:
        return "üå§Ô∏è"

async def get_weather(city: str, user_id: int = None):
    """–û—Ç—Ä–∏–º—É—î –ø–æ–≥–æ–¥—É –¥–ª—è –º—ñ—Å—Ç–∞"""
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city,
        "appid": WEATHER_API_KEY,
        "units": "metric",
        "lang": "ua"
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
                
                data = await response.json()
                
                if data.get("cod") != 200:
                    return f"‚ùå –ú—ñ—Å—Ç–æ '{city}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."
                
                temp = data['main']['temp']
                feels_like = data['main']['feels_like']
                description = data['weather'][0]['description']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']
                weather_id = data['weather'][0]['id']
                emoji = get_weather_emoji(weather_id)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º—ñ—Å—Ç–æ –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö
                is_fav = is_favorite(user_id, city) if user_id else False
                fav_status = "‚≠ê –í —É–ª—é–±–ª–µ–Ω–∏—Ö" if is_fav else ""
                
                return (
                    f"{emoji} <b>–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {city.capitalize()}</b> {fav_status}\n\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b>\n"
                    f"ü§î –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: <b>{feels_like}¬∞C</b>\n"
                    f"üìù –û–ø–∏—Å: {description.capitalize()}\n"
                    f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
                    f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –º/—Å"
                )
    except aiohttp.ClientError:
        return "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è."
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏: {e}")
        return "‚ùå –í–∏–Ω–∏–∫–ª–∞ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

# ==================== –û–ë–†–û–ë–ù–ò–ö–ò ====================
@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ username"
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (@{username}) –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")
    
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.full_name}</b>! üëã\n\n"
        f"–Ø –¥–æ–ø–æ–º–æ–∂—É –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É –≤ –±—É–¥—å-—è–∫–æ–º—É –º—ñ—Å—Ç—ñ —Å–≤—ñ—Ç—É.\n"
        f"–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –º—ñ—Å—Ç–∞ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É! ‚≠ê",
        reply_markup=get_start_keyboard()
    )

@dp.message(F.text == "üå§Ô∏è –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É")
async def get_weather_handler(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Ü–µ—Å—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏"""
    await message.answer(
        "üèôÔ∏è <b>–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:</b>\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –õ—å–≤—ñ–≤, London, Paris",
        reply_markup=get_back_keyboard()
    )
    await state.set_state(WeatherForm.waiting_for_city)

@dp.message(F.text == "‚≠ê –£–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞")
async def show_favorites_handler(message: Message):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç"""
    user_id = message.from_user.id
    cities = get_favorite_cities(user_id)
    
    if not cities:
        await message.answer(
            "üì≠ <b>–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç</b>\n\n"
            "–©–æ–± –¥–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö:\n"
            "1. –î—ñ–∑–Ω–∞–π—Ç–µ—Å—è –ø–æ–≥–æ–¥—É –≤ –º—ñ—Å—Ç—ñ\n"
            "2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '‚≠ê –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö'",
            reply_markup=get_start_keyboard()
        )
        return
    
    keyboard = get_favorites_keyboard(cities)
    
    cities_list = "\n".join([f"‚≠ê {city.capitalize()}" for city in cities])
    await message.answer(
        f"<b>üìå –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞ ({len(cities)}):</b>\n\n"
        f"{cities_list}\n\n"
        f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º—ñ—Å—Ç–æ, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ–≥–æ–¥—É:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üìö –î–æ–ø–æ–º–æ–≥–∞")
async def help_handler(message: Message):
    """–ü–æ–∫–∞–∑—É—î –¥–æ–≤—ñ–¥–∫—É"""
    await message.answer(
        "<b>üìö –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "üå§Ô∏è <b>–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É</b> - –≤–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞\n\n"
        "‚≠ê <b>–£–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞</b> - –∑–±–µ—Ä—ñ–≥–∞–π—Ç–µ —É–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É\n\n"
        "üí° <b>–ü—ñ–¥–∫–∞–∑–∫–∞:</b> –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –ø–æ–≥–æ–¥–∏ –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –º—ñ—Å—Ç–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö!",
        reply_markup=get_start_keyboard()
    )

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def go_back_to_main_menu(message: Message, state: FSMContext):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
    await state.clear()
    await message.answer(
        "üè† –í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é",
        reply_markup=get_start_keyboard()
    )

@dp.message(WeatherForm.waiting_for_city)
async def get_city_and_show_weather(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –º—ñ—Å—Ç–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    city = message.text.strip()
    
    # –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if not city or len(city) < 2:
        await message.answer("‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏)")
        return
    
    if len(city) > 50:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞")
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥—É
    user_id = message.from_user.id
    weather_report = await get_weather(city, user_id)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º—ñ—Å—Ç–æ –∑–Ω–∞–π–¥–µ–Ω–æ
    if "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" in weather_report.lower():
        await message.answer(weather_report, reply_markup=get_back_keyboard())
        return
    
    await message.answer(weather_report)
    
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ –¥–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö
    is_fav = is_favorite(user_id, city)
    
    if is_fav:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö")],
                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–¶–µ –º—ñ—Å—Ç–æ –≤–∂–µ –≤ –≤–∞—à–∏—Ö —É–ª—é–±–ª–µ–Ω–∏—Ö! ‚≠ê",
            reply_markup=keyboard
        )
    else:
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="‚≠ê –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö")],
                [types.KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
        await message.answer(
            "–•–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —Ü–µ –º—ñ—Å—Ç–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö?",
            reply_markup=keyboard
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º—ñ—Å—Ç–æ –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(current_city=city)
    await state.set_state(WeatherForm.waiting_for_favorite_action)

@dp.message(WeatherForm.waiting_for_favorite_action, F.text == "‚≠ê –î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö")
async def add_to_favorites_handler(message: Message, state: FSMContext):
    """–î–æ–¥–∞—î –º—ñ—Å—Ç–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    data = await state.get_data()
    city = data.get('current_city')
    user_id = message.from_user.id
    
    if add_favorite_city(user_id, city):
        await message.answer(
            f"‚úÖ –ú—ñ—Å—Ç–æ <b>{city.capitalize()}</b> –¥–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö! ‚≠ê",
            reply_markup=get_start_keyboard()
        )
    else:
        await message.answer(
            f"‚ÑπÔ∏è –ú—ñ—Å—Ç–æ <b>{city.capitalize()}</b> –≤–∂–µ —î –≤ —É–ª—é–±–ª–µ–Ω–∏—Ö!",
            reply_markup=get_start_keyboard()
        )
    
    await state.clear()

@dp.message(WeatherForm.waiting_for_favorite_action, F.text == "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö")
async def remove_from_favorites_handler(message: Message, state: FSMContext):
    """–í–∏–¥–∞–ª—è—î –º—ñ—Å—Ç–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"""
    data = await state.get_data()
    city = data.get('current_city')
    user_id = message.from_user.id
    
    if remove_favorite_city(user_id, city):
        await message.answer(
            f"üóëÔ∏è –ú—ñ—Å—Ç–æ <b>{city.capitalize()}</b> –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö",
            reply_markup=get_start_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –º—ñ—Å—Ç–æ",
            reply_markup=get_start_keyboard()
        )
    
    await state.clear()

@dp.callback_query(F.data.startswith("fav_"))
async def favorite_city_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —É–ª—é–±–ª–µ–Ω–µ –º—ñ—Å—Ç–æ"""
    city = callback.data.replace("fav_", "")
    user_id = callback.from_user.id
    
    await callback.answer()
    
    weather_report = await get_weather(city, user_id)
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö", callback_data=f"remove_{city}")],
        [types.InlineKeyboardButton(text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", callback_data=f"fav_{city}")]
    ])
    
    await callback.message.answer(weather_report, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("remove_"))
async def remove_favorite_callback(callback: CallbackQuery):
    """–í–∏–¥–∞–ª—è—î –º—ñ—Å—Ç–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö —á–µ—Ä–µ–∑ callback"""
    city = callback.data.replace("remove_", "")
    user_id = callback.from_user.id
    
    if remove_favorite_city(user_id, city):
        await callback.answer(f"‚úÖ {city.capitalize()} –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
        cities = get_favorite_cities(user_id)
        if cities:
            keyboard = get_favorites_keyboard(cities)
            cities_list = "\n".join([f"‚≠ê {c.capitalize()}" for c in cities])
            await callback.message.edit_text(
                f"<b>üìå –í–∞—à—ñ —É–ª—é–±–ª–µ–Ω—ñ –º—ñ—Å—Ç–∞ ({len(cities)}):</b>\n\n"
                f"{cities_list}\n\n"
                f"–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –º—ñ—Å—Ç–æ, —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è –ø–æ–≥–æ–¥—É:",
                reply_markup=keyboard
            )
        else:
            await callback.message.edit_text("üì≠ –£ –≤–∞—Å –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –º—ñ—Å—Ç")
    else:
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
async def main() -> None:
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    init_db()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
    
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–∏–π.")