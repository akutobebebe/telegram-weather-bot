import asyncio
import logging
import sys
import os
import aiohttp

from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties

from keyboards import get_start_keyboard
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WEATHER_API_KEY = os.getenv("WEATHER_API_KEY") 


bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()



class WeatherForm(StatesGroup):
    waiting_for_city = State()



async def get_weather(city: str):
    url = "http://api.openweathermap.org/data/2.5/weather"
    params = {
        "q": city, #–º—ñ—Å—Ç–æ
        "appid": WEATHER_API_KEY, #–∫–ª—é—á
        "units": "metric", #–æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è
        "lang": "ua" #–º–æ–≤–∞
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status != 200:
                return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."

            data = await response.json()

            if data.get("cod") != 200:
                return f"–ú—ñ—Å—Ç–æ '{city}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É."

            temp = data['main']['temp']
            feels_like = data['main']['feels_like']
            description = data['weather'][0]['description']
            humidity = data['main']['humidity']
            wind_speed = data['wind']['speed']

            return (
                f"<b>–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ {city.capitalize()}:</b>\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
                f"ü§î –í—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫: {feels_like}¬∞C\n"
                f"üìù –û–ø–∏—Å: {description.capitalize()}\n"
                f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n"
                f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {wind_speed} –º/—Å"
            )


# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ (—Ö–µ–Ω–¥–ª–µ—Ä–∏) ---

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Ç, <b>{message.from_user.full_name}</b>! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø–æ–≥–æ–¥—É.",
        reply_markup=get_start_keyboard()
    )

@dp.callback_query(lambda c: c.data == 'get_weather_button')
async def process_weather_press(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ñ–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É'."""
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:")
    await state.set_state(WeatherForm.waiting_for_city)

@dp.message(WeatherForm.waiting_for_city)
async def get_city_and_show_weather(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–Ω–∏–∫, —â–æ –ª–æ–≤–∏—Ç—å –º—ñ—Å—Ç–æ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –ø–æ–∫–∞–∑—É—î –ø–æ–≥–æ–¥—É."""
    city = message.text
    weather_report = await get_weather(city)
    await message.answer(weather_report)
    await state.clear()


async def main() -> None:
    # –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤ –æ—Ç Telegram
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –≤–∏–º–∫–Ω–µ–Ω–∏–π.")
